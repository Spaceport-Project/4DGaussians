<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IBC Demo 3</title>
    <!-- <link rel="stylesheet" href="https://cdn.pannellum.org/2.5/pannellum.css"/> -->
    <link rel="stylesheet" href="https://d2nu66bxxofnfe.cloudfront.net/demo/src/css/pannellum.css">
    <link rel="icon" href="./spaceport_logo.png" type="image/png">

    <script type="text/javascript" src="https://cdn.pannellum.org/2.5/pannellum.js"></script>

    <link href="https://d2nu66bxxofnfe.cloudfront.net/demo/src/css/video-js.css" rel="stylesheet"
      type="text/css">
    <!-- <script type="text/javascript" src="http://vjs.zencdn.net/5.17.0/video.js"></script> -->
    <script src="https://vjs.zencdn.net/8.0.4/video.min.js"></script>

    <script src="https://d2nu66bxxofnfe.cloudfront.net/demo/src/js/videojs-pannellum-plugin.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://d2nu66bxxofnfe.cloudfront.net/demo/src/js/videojs-playlist.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link href="https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet">


     <style>

        .vjs-has-started .vjs-loading-spinner {
        display: none !important;
        }
    
        
        body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        }

        .video-container {
        position: relative;
        width: 100%;
        height: 100%;
        }
        

        #videoplayer {
        width: 100%;
        height: 100%;
        }

        .icon {
        
        position: absolute; 
        bottom: 70px;
        right: 70px;
        cursor: default;
        z-index: 2;
        }


        .arrow {
            transition: fill 0.3s; /* Smooth transition for the fill property */
        }

        .arrow:hover {
            fill: #ff0000; /* Change the fill color to orange when hovered */
            cursor: pointer; /* Change cursor to a pointer to indicate interactivity */
        }

        .extra-info {
            display: none;
            line-height: 30px;
            font-size: 12px;
            position: absolute;
            top: 0;
            left: 50px;
        
        }

        .info:hover .extra-info {
            display: block;
        }

        .info {
            font-size: 20px;
            padding-left: 5px;
            width: 20px;
            border-radius: 15px;
            z-index: 2;
            position: fixed;
            left: 5%;
            top: 80%;
            color: red;
        }

        .info:hover {
            background-color: white;
            padding: 0 0 0 5px;
            width: 315px;
            height: 120px;
            text-align: left !important;
            z-index: 99;
        }
        /* Remove pannellum text when left-clicked on the page*/

        .pnlm-about-msg {
            visibility: hidden;
            a {
                visibility: hidden;
            }
         }



    </style>


</head>
 <body>

        <!-- <div class="info">
          <i class="icon-info-sign"></i>
    
          <span class="extra-info">
            Use "I-J-K-L" or buttons on the screen to move through the scene. <br>
            Use "U and H" to move among layers in height.<br>
            Use Arrow Keys or Mouse to change view.
          </span>
        </div> -->
      
  

  <div class="video-container">
    <div class="info">
        <i class="icon-info-sign"></i>
  
        <span class="extra-info">
          Use "I-J-K-L" or buttons on the screen to move through the scene. <br>
          Use "U and H" to move among layers in height.<br>
          Use Arrow Keys or Mouse to change view.
         
        </span>
      </div>
 
      <video id="videoplayer" class="js-video js-video video-js vjs-big-play-centered" style="display: none;" width="1440px" height="720px" controls playsinline
      crossorigin="anonymous">
          <source src="https://d223v4e7dt6i6.cloudfront.net/oguz_360_grid_videos/grid_21.mp4" type="video/mp4" />
          <p class="vjs-no-js">
              To view this video please enable JavaScript, and consider upgrading to
              a web browser that <a href="http://videojs.com/html5-video-support/"
              target="_blank">supports HTML5 video</a>
          </p>
          
      </video>
   
      <div class = "icon"  id="svg-container"></div>
</div>



<script>

document.addEventListener('DOMContentLoaded', function() {
    fetch('./arrows.svg')
        .then(response => response.text())
        .then(svgData => {
            document.getElementById('svg-container').innerHTML = svgData;

            // Add click event listeners to individual triangles
            var right_arrow = document.getElementById('right-arrow');
            var left_arrow = document.getElementById('left-arrow');
            var up_arrow = document.getElementById('up-arrow');
            var down_arrow = document.getElementById('down-arrow');
            var middle = document.getElementById('middle');

            right_arrow.addEventListener('click', function(event) {

                window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'l'}));
            });

            left_arrow.addEventListener('click', function() {
                window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'j'}));
            })

            up_arrow.addEventListener('click', function() {
                window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'i'}));
            });

            down_arrow.addEventListener('click', function() {
                window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'k'}));
            });
            
            middle.addEventListener('click', function(){
                player.pnlmViewer.setPitch(pitch_init, 0);
                player.pnlmViewer.setYaw(yaw_init, 0);
                player.pnlmViewer.setHfov(hfov_init, 0);
                index = index_init
                player.playlist.currentItem(index);

            });

    
        })
        .catch(error => console.error(error));

});

const options = {
  autoSetup: false,
  preload: 'metadata',
  autoplay: false,
  muted:"muted",
  loadingSpinner: true,
  plugins: {
                pannellum: {}
            },  
  html5: {
    nativeControlsForTouch: false,
    nativeAudioTracks: false,
    nativeVideoTracks: true,
    hls: {
      limitRenditionByPlayerDimensions: false,
      smoothQualityChange: true,
      bandwidth: 6194304,
      overrideNative: true
    }
  }
}

const pitch_thres = 180/6;
const yaw_thres = 180/8;
const grid_length = 13;
const grid_width = 18;
const grid_height = 1;
const grid_area = grid_length * grid_width;
const grid_volume = grid_length * grid_width * grid_height;
var index_init = 117;
var index= index_init;
var h = Math.floor(index / grid_area);
var hfov_init= 120.0;
var pitch_init = 0.0;
var yaw_init= 0.0;
var hfov = hfov_init;
var pitch = pitch_init;
var yaw = yaw_init;
var basepath = "https://d223v4e7dt6i6.cloudfront.net/oguz_360_grid_videos"
var players ={}
var cl = document.getElementsByClassName('video-container');

// var player = videojs('panorama', {
//           plugins: {
//                           pannellum: {}
//                       }
//           }
// );

// var list = [];
// for (let i = 0 ; i < grid_volume ; i++) {
// list.push({
//   sources: [{
//     src: basepath + "/grid_" + i + ".mp4",
//     type: 'video/mp4'
//   }]});


// }


var totalVolume = calculateVolumeXYZ(index, 1);
console.log(totalVolume);
let player_arr= createVolumeXYZ(index, 1, h);
createVideoDOMElementsFromArray(cl[0], player_arr);
applyTransition(index, 0);



// player.playlist(list);
// player.pnlmViewer.setPitch(pitch, 0);
// player.pnlmViewer.setYaw(yaw, 0);
// player.pnlmViewer.setHfov(hfov, 0);

// player.playlist.autoadvance(0);
// player.playlist.currentItem(index);
// player.requestFullscreen();

// player.on('ended', function (){
//     console.log("ended", index)
   
//     if (index < 0) player.playlist.currentItem(0);
//     player.play();


// })


async function createVideoDOMElementsFromArray(cls, vid_array){

    for (const vid of vid_array) {
        let elem = document.getElementById("videoplayer");
        let tmp = vid.split('_');
        let i = parseInt( tmp[tmp.length -1].split('.')[0]);
        let clone = elem.cloneNode(true);
        clone.id = `videoplayer_${i}`;
        clone.style.width="100%";
        clone.style.height="100%";
        clone.style.display ="block";
        cls.appendChild(clone);
    
        let player = videojs(clone.id, options);
        player.pnlmViewer.setPitch(pitch, 0);
        player.pnlmViewer.setYaw(yaw, 0);
        player.pnlmViewer.setHfov(hfov, 0);
        player.src({ src: `${basepath}/grid_${i}.mp4`, type: 'video/mp4' })
        // player.el().style.display ="flex";
        player.pause();
        players[i]=player

    }
}

async function applyTransition(ind, time) {
    
    // if (prev_ind != ind) {
    //     const videoElement =   players[prev_ind].el().querySelector('video');
    //     const videoAspectRatio = videoElement.videoWidth/videoElement.videoHeight;
    //     const videoClientAspectRatio = videoElement.clientWidth/videoElement.clientHeight;
    //     if (videoAspectRatio > videoClientAspectRatio) 
    //     {
    //         var width = videoElement.clientWidth;
    //         var height = width/videoAspectRatio;
    //         var left = 0;
    //         var top = (videoElement.clientHeight - height)/2;
    //     } 
    //     else 
    //     {
            
    //         var height = videoElement.clientHeight;
    //         var width = height * videoAspectRatio;
    //         var top = 0;
    //         var left = (videoElement.clientWidth - width)/2;
    //     }

    
    //     canvas.width = videoElement.clientWidth
    //     canvas.height = videoElement.clientHeight;
    //     let canvasContext = canvas.getContext('2d');

    // // player.pause();
    // // if (!players[prev_ind].el().classList.contains('js-video-hidden'))
    // //     players[prev_ind].el().classList.add('js-video-hidden'); 
    // // if (canvas.classList.contains('js-video-hidden')) 
    // //     canvas.classList.remove('js-video-hidden'); 
    //     players[prev_ind].el().style.display = "none"
    //     canvas.style.display="block";

    //     canvasContext.fillStyle = "black";
    //     canvasContext.fillRect(0, 0, canvas.width, canvas.height);
    //     canvasContext.drawImage(videoElement, left, top, width, height);

    // }

  // Gets all instances of players.
    const allPlayers = videojs.getAllPlayers();
   
    
    allPlayers.map(  (player) => {
        
            if (player.id_ ==  `videoplayer_${ind}` ) {
                
                // if (!player.el().classList.contains('js-video-hidden')) {
                    
                    if (player.paused()) {
                        // setTimeout(()=> {player.currentTime(time);}, 1);
                        player.currentTime(time)
                       
                         player.play(); 
                        player.el().style.display = "block";
                      //  canvas.style.display="none";
                       
                        // canvas.classList.add('js-video-hidden'); 
                       
                        
                        
                // } 
            }
            } else {
                    player.el().style.display = "none";
                // if (!player.el().classList.contains('js-video-hidden')) {
                //     player.el().classList.add('js-video-hidden');
                    if (!player.paused()) 
                    {
                        player.pause();

                    
                    }
                //  }


            }
       
        })
}


window.addEventListener('keydown', function(event) {
 
 var key = findKey(pitch, yaw , event.key);
 console.log(key);
 var currentTime = players[index].currentTime();
 var prev = index;
 switch (key) {
     case "j":
         {               
             
             const tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             

         } 
             
         break;

     case "l":
         {
             const tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
           
         }

         break;

     case "i":
         {
             const tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
            
            
         }
         break;

     case "k":
         {
             const tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
            
      
         }

         break;

     case "u":
         {
             h++;
             const tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
             
         
         }
         break;

     case "h":
         {
             h--;
             const tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
             


         }

         break;

     case "li":
         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             


         }
         break;

     case "ij":
         {
             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
       
             
         }
         break;

     case "jk": 
         {
             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
           

         }
         break;

     case "kl":
         {

             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
            

         }
         break;

     case "ui":
         {
             
             
             let tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
       


         }
         break;
     
     case "hk":
         {
             let tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
       



         }
         break;

     case "hi":
         {
             
             let tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
        

         }
         break;
     
     case "uk": 
         {
             let tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
          

         }
         break;
     
     case "ul":
         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
         

         } 
         break; 

     case "hj":
         {

             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp;  
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
          

         }
         break;

     case "hl":

         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
           

         }
         break;
     
     case "uj": 
         {
             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
           
         }
         break;

     case "uli":
         {

             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
       
         }
         break;

     case "hjk":
         {

             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
        
         }
         break;
     
     case "hli":
         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;

         }
         break;

     case "ujk":
         {

             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
        
         }
         break;
     
     
     case "ukl":
         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
           
         }
         break;
     
     case "hij":

         {
             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
          

         }
         break;

     case "hkl":

         {
             let tmp = index + grid_length;
             index = tmp >= ( h + 1) * grid_area ? index: tmp;
             tmp = index - 1;  
             index = (tmp + 1) % grid_length == 0 ? index: tmp;
             h--;
             tmp = index - grid_area;
             if (h < 0) h = 0;
             else index = tmp;
        

         }
         break;

     case "uij" : 
         {
             let tmp = index - grid_length;
             index = tmp < h * grid_area ? index: tmp; 
             tmp = index + 1;  
             index = tmp % grid_length == 0 ? index: tmp;
             h++;
             tmp = index + grid_area;
             if (h < grid_height) index = tmp;
             else h = grid_height -1;
       
         }
         break;

     case "ArrowUp":
        pitch = player.pnlmViewer.getPitch();
        yaw = player.pnlmViewer.getYaw();

        return;


     case "ArrowDown":
        pitch = player.pnlmViewer.getPitch();
        yaw = player.pnlmViewer.getYaw();

        return;   
     case "ArrowLeft":
        pitch = player.pnlmViewer.getPitch();
        yaw = player.pnlmViewer.getYaw();

        return;


     case "ArrowRight":
        pitch = player.pnlmViewer.getPitch();
        yaw = player.pnlmViewer.getYaw();

        return; 

     default:
        return;

 }


//    player.pnlmViewer.setPitch(pitch, 0);
//    player.pnlmViewer.setYaw(yaw, 0);
//    player.pnlmViewer.setHfov(hfov, 0);
   console.log(index);

   if (prev !== index) {
    // player.playlist.currentItem(index);
    // setTimeout(()=> {player.currentTime(currentTime);}, 1);

        var oldarray= new Set(player_arr) ;//array.slice(0);
        let arr = createVolumeXYZ(index, 2, h);
        for (const a of arr) {
        //   if (array.indexOf(a)==-1) array.push(a);
            if (!player_arr.has(a))  player_arr.add(a);
        }

        let difference = getDifference(player_arr, oldarray);
        // console.log("difference:",difference, "\narray:", array)

        if (difference.size > 0)
            createVideoDOMElementsFromArray(cl[0], difference);
        applyTransition(index, currentTime)
   }



});

window.addEventListener( 'mouseup', function (event){

    // console.log(pitch, yaw, hfov)
    pitch = players[index].pnlmViewer.getPitch();
    yaw = players[index].pnlmViewer.getYaw();




}, false );

window.addEventListener("wheel", (event) =>{
    hfov = players[index].pnlmViewer.getHfov();

}, false);




function findKey(pitch, yaw, key) {
    if (yaw > 180) yaw = yaw -360;

    key =  key.replace(/\ı/g, "i");

    if (!(pitch > pitch_thres || pitch < -pitch_thres) && !(yaw > yaw_thres || yaw < -yaw_thres)) {
        

    } else if (pitch > pitch_thres && !(yaw > yaw_thres || yaw < -yaw_thres)  )   {
        if (key=="i") key = "ui";
        else if (key=="j") key = "j";
        else if (key=="k") key = "hk";
        else if (key=="l") key = "l";
    } else if (pitch < -pitch_thres && !(yaw > yaw_thres || yaw < -yaw_thres)  )   {
        if (key=="i") key = "hi";
        else if (key=="j") key = "j";
        else if (key=="k") key = "uk";
        else if (key=="l") key = "l";
    } 
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > yaw_thres && yaw < 3*yaw_thres) ){
        if (key=="i") key = "li";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "jk";
        else if (key=="l") key = "kl";
    } else if ( pitch > pitch_thres && (yaw > yaw_thres && yaw < 3*yaw_thres) ) {
        if (key=="i") key = "uli";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "hjk";
        else if (key=="l") key = "kl";
    } else if ( pitch < -pitch_thres && (yaw > yaw_thres && yaw < 3*yaw_thres) ) {
        if (key=="i") key = "hli";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "ujk";
        else if (key=="l") key = "kl";
    }
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "l";
        else if (key=="j") key = "i";
        else if (key=="k") key = "j";
        else if (key=="l") key = "k";
    } else if ( pitch > pitch_thres && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "ul";
        else if (key=="j") key = "i";
        else if (key=="k") key = "hj";
        else if (key=="l") key = "k";
    } else if ( pitch < -pitch_thres && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "hl";
        else if (key=="j") key = "i";
        else if (key=="k") key = "uj";
        else if (key=="l") key = "k";
    } 
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 5*yaw_thres && yaw < 7*yaw_thres) ) {
        if (key=="i") key = "kl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "ij";
        else if (key=="l") key = "jk";

    } else if (pitch > pitch_thres  && (yaw > 5*yaw_thres && yaw < 7*yaw_thres)) {
        if (key=="i") key = "ukl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "hij";
        else if (key=="l") key = "jk";
    }  else if (pitch < -pitch_thres  && (yaw > 5*yaw_thres && yaw < 7*yaw_thres)) {
        if (key=="i") key = "hkl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "uij";
        else if (key=="l") key = "jk";

    } 
    
    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "k";
        else if (key=="j") key = "l";
        else if (key=="k") key = "i";
        else if (key=="l") key = "j";
    } else if (pitch > pitch_thres  && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "uk";
        else if (key=="j") key = "l";
        else if (key=="k") key = "hi";
        else if (key=="l") key = "j";
    } else if (pitch < -pitch_thres  && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "hk";
        else if (key=="j") key = "l";
        else if (key=="k") key = "ui";
        else if (key=="l") key = "j";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)) {
        if (key=="i") key = "jk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "li";
        else if (key=="l") key = "ij";
    } else if (pitch > pitch_thres  && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)){
        if (key=="i") key = "ujk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "hli";
        else if (key=="l") key = "ij";
    } else if (pitch < -pitch_thres  && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)){
        if (key=="i") key = "hjk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "uli";
        else if (key=="l") key = "ij";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "j";
        else if (key=="j") key = "k";
        else if (key=="k") key = "l";
        else if (key=="l") key = "i";
    } else if (pitch > pitch_thres  && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "uj";
        else if (key=="j") key = "k";
        else if (key=="k") key = "hl";
        else if (key=="l") key = "i";
    } else if (pitch < -pitch_thres  && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "hj";
        else if (key=="j") key = "k";
        else if (key=="k") key = "ul";
        else if (key=="l") key = "i";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "ij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "kl";
        else if (key=="l") key = "li";
    } else if (pitch > pitch_thres  && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "uij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "hkl";
        else if (key=="l") key = "li";
    } else if (pitch < -pitch_thres  && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "hij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "ukl";
        else if (key=="l") key = "li";

    }
   
    return key;

}


function getDifference(setA, setB) {
  return new Set(
    [...setA].filter(element => !setB.has(element))
  );
}

function createLineY(ind, incr) {
    let arr = new Set();
    
    
    for (let i = ind  ; i <= ind + incr ; i++){
        if ((i+1) % grid_length == 0) {
            arr.add(`${basepath}/grid_${i}.mp4`);
            break;
        }
        arr.add(`${basepath}/grid_${i}.mp4`);

    }

    for (let i = ind ; i >= ind - incr ; i--){
        if (i % grid_length == 0) {
            arr.add(`${basepath}/grid_${i}.mp4`);
            break;
        }
        arr.add(`${basepath}/grid_${i}.mp4`);
    }

    return arr;

}



function createAreaXY(ind, incr, k) {
    let arr=new Set();
    for (let i = ind  ; i <= ind + incr*grid_length ; i+=grid_length){

        if (i >= ( k + 1) * grid_area ) break;
        arr =  new Set([...createLineY(i, incr), ...arr]);
    }

    for (let i = ind  ; i >= ind - incr*grid_length ; i-=grid_length){
        if (i <  k * grid_area ) break;
         arr = new Set([...createLineY(i, incr), ...arr]);
    }

    return arr;
}
function createVolumeXYZ(ind, incr, k) {
    let arr=new Set();
   
    let kk = k;
    for (let i = ind ; i <= ind + incr*grid_area ; i+=grid_area, kk++){
         if (i >= grid_volume || kk >= grid_height) break;
           arr =  new Set([...createAreaXY(i, incr, kk), ...arr]);
    }
    for (let i = ind  ; i >= ind - incr*grid_area ; i-=grid_area, k--){
         if (i < 0 || k < 0) break;
          arr =  new Set([...createAreaXY(i, incr, k), ...arr]);
    }


    return arr;
}



function calculateVolumeXYZ(ind, incr) {

    var h_plus = ind + grid_area*incr > grid_volume ? grid_height - h -1: incr;
    var h_minus = ind - grid_area*incr < 0  ? h:  incr;
    var hh = h_minus + h_plus + 1;

    var l_plus = ind % grid_length + incr >= grid_length ? grid_length - ind % grid_length-1: incr;
    var l_minus = ind % grid_length - incr < 0 ? ind % grid_length: incr;
    var ll = l_minus + l_plus + 1;

    var w_plus = ind + incr * grid_length > ( h + 1) * grid_area ? grid_width - Math.ceil((ind % grid_area)/grid_length) :incr
    var w_minus = ind - incr * grid_length < ( h ) * grid_area ? Math.ceil((ind % grid_area)/grid_length) :incr;
    var ww = w_minus + w_plus + 1 ; 


    return hh*ww*ll;

}



 </script>
    
 </body>


</html>